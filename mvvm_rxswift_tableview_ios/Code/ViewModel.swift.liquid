//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import Foundation
import UIKit
import RxSwift
import RxCocoa

class {{ module_info.name }}ViewModel: BaseViewModel {

    /// Different type of cells
    enum {{ module_info.name }}TypeCell {
        case cellTypeOne/*(viewModel: ViewCellModel)*/ // To rename and add ViewModelCell
    }

    /// The sections
    public struct {{ module_info.name }}ViewSection {
        let title: String?
        var cells: [{{ module_info.name }}TypeCell]
    }
    
    /// The state of the view
    enum ViewState {
        case loaded
        case empty
        case loading
        case failed
    }

    // MARK: - Properties

    /// The current viewState
    let viewState = Variable<{{ module_info.name }}ViewModel.ViewState>(ViewState.loading)
    
    /// All the table view sections
    let sections = Variable<[{{ module_info.name }}ViewSection]>([])
    
    /// The object(s) fetched - NEED TO BE RENAMED
    let fetchedObject = Variable<[Any]?>(nil)

    // MARK: - Initializers

    required init(services: Services) {
        super.init(services: services)
        
//       self.services.rx
//            .fetchSomething()
//            .do(onError: { (error) in
//                self.state.value = .error
//            })
//            .bind(to: self.fetchedObject)
//            .addDisposableTo(self.disposeBag)

        self.fetchedObject
            .asObservable()
            .map { objets -> ViewState in
                // add state logic
                return .loaded
            }
            .bind(to: self.viewState)
            .addDisposableTo(self.disposeBag)

        self.fetchedObject
            .asObservable()
            .subscribe(onNext: { [weak self] (objects) in
                self?.generateSections()
            })
            .addDisposableTo(self.disposeBag)
    }

    required init(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - Methods

    /**
     Generate the sections according to the user's payment methods
     */
    func generateSections() -> [{{ module_info.name }}ViewSection] {
        
        var sections: [{{ module_info.name }}ViewSection] = []
    
        // if let sectionOne = self.createFirstSection() {
        //     sections.append(sectionOne)
        // }

        return sections
    }

}
