//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import Foundation
import UIKit
import RxSwift
import RxCocoa

protocol {{ module_info.name }}ViewControllerDelegate: class {
    
}

class {{ module_info.name }}ViewController: BaseViewController<{{ module_info.name }}ViewModel, {{ module_info.name }}View>, UICollectionViewDataSource, UICollectionViewDelegate {

    // MARK: - Properties

    weak var delegate: {{ module_info.name }}ViewControllerDelegate?

    // MARK: - Initializers

    required init(viewModel: {{ module_info.name }}ViewModel) {
        super.init(viewModel: viewModel)
    }
    
    @available(*, unavailable)
    required public init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func setupBindings() {
        super.setupBindings()

        self.viewModel.viewState
            .asObservable()
            .subscribe(onNext: { [weak self] (viewState) in
                self?.rootView.updateView(with: viewState)
            })
            .addDisposableTo(self.disposeBag)

        self.viewModel.sections
            .asObservable()
            .subscribe(onNext: { [weak self] (sections) in
                self?.rootView.collectionView.reloadData()
            })
            .addDisposableTo(self.disposeBag)

    }

    override open func viewDidLoad() {
        super.viewDidLoad()

        self.rootView.collectionView.delegate = self
        self.rootView.collectionView.dataSource = self
    }

    // MARK: - UICollectionViewDataSource

    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return self.viewModel.sections.value.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.viewModel.sections.value[section].cells.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        let cellType = self.viewModel.sections.value[indexPath.section].cells[indexPath.row]

        switch cellType {
            
            case .cellTypeOne/*(let viewModel)*/:
                // let cellOne = collectionView.dequeueReusableCell(withIdentifier: CellOneTableViewCell.ReuseIdentifier, for: indexPath) as! CellOneColletionViewCell
                // cellOne.configureWith(viewModel)
                // return cellOne
                return UICollectionViewCell()
        }

        return UICollectionViewCell()
    }

    // MARK: - UICollectionViewDelegate

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    }

    // MARK: - Methods

}
