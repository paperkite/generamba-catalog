//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import Foundation
import UIKit
import ReactiveCocoa
import ReactiveSwift

class {{ module_info.name }}ViewModel: BaseViewModel {
    
    /// Different type of cells
    enum {{ module_info.name }}TypeCell {
        case cellTypeOne/*(viewModel: ViewCellModel)*/ // To rename and add ViewModelCell
    }
    
    /// Each cell in each section
    public struct {{ module_info.name }}ViewCell {
        let title: String
        let cellType: {{ module_info.name }}TypeCell
    }

    /// The section of the table view
    public struct {{ module_info.name }}ViewSection {
        let title: String?
        var cells: [{{ module_info.name }}ViewCell]
    }
    
    /// The state of the view
    enum ViewState {
        case loaded
        case empty
        case loading
        case failed
    }

    // MARK: - Properties

    /// The current viewState
    let viewState = MutableProperty<{{ module_info.name }}ViewModel.ViewState>(ViewState.loading)
    
    /// All the table view sections
    let sections = MutableProperty<[{{ module_info.name }}ViewSection]>([])
    
    /// The object(s) fetched
    /// NEED TO BE RENAMED
    let fetchedObject = MutableProperty<[Any]>([])

    /// The fetching Action
    /// NEED TO BE RENAMED
//    open lazy var fetchSomethingAction: Action<Void, [TransactionIndex], Error> = self.createFetchSomethingAction()
//    fileprivate func createFetchSomethingAction() -> Action<Void, [Any], Error> {
//        return Action() { [unowned self] in
//            return self.services.dataService.myRequestSignalProducer()
//                .flatMap(.latest) { [unowned self] (param: Parameter) -> SignalProducer<[Any], Error> in
//                    return self.services.dataService.api.getObject()
//                }
//        }
//    }

    // MARK: - Initializers

    required init(services: Services) {
        super.init(services: services)
        
//        self.fetchSomethingAction.values.observeValues { [weak self] fetchedObject in
//            self?.transactions.value = fetchedObject
//        }

        self.fetchedObject.producer
            // Skip 1 as we don't want to process the initial/default value. Which is the loading.
            .skip(first: 1)
            .startWithValues { [weak self] fetchedObject in
                if fetchedObject.isEmpty {
                    self?.viewState.value = ViewState.empty
                } else {
                    self?.viewState.value = ViewState.loaded
                }
            }
    }

    required init(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - Methods

    /**
     Generate the sections according to the user's payment methods
     */
    func generateSections() -> [{{ module_info.name }}ViewSection] {
        
        var sections: [{{ module_info.name }}ViewSection] = []
    
        // if let sectionOne = self.createFirstSection() {
        //     sections.append(sectionOne)
        // }

        return sections
    }

}
